// Mocks generated by Mockito 5.4.2 from annotations
// in get_wallpaper/test/helper/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:bloc/bloc.dart' as _i12;
import 'package:dartz/dartz.dart' as _i3;
import 'package:dio/dio.dart' as _i4;
import 'package:get_wallpaper/core/core.dart' as _i11;
import 'package:get_wallpaper/data/data.dart' as _i2;
import 'package:get_wallpaper/domain/domain.dart' as _i5;
import 'package:get_wallpaper/presentation/cubit/categorized_wallpaper/categorized_wallpaper_cubit.dart'
    as _i7;
import 'package:get_wallpaper/presentation/cubit/detail_wallpaper/detail_wallpaper_cubit.dart'
    as _i8;
import 'package:get_wallpaper/presentation/cubit/list_wallpaper/list_wallpaper_cubit.dart'
    as _i6;
import 'package:get_wallpaper/presentation/cubit/search_wallpaper/search_wallpaper_cubit.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWallpaper_0 extends _i1.SmartFake implements _i2.Wallpaper {
  _FakeWallpaper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_2 extends _i1.SmartFake implements _i4.BaseOptions {
  _FakeBaseOptions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_3 extends _i1.SmartFake
    implements _i4.HttpClientAdapter {
  _FakeHttpClientAdapter_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_4 extends _i1.SmartFake implements _i4.Transformer {
  _FakeTransformer_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_5 extends _i1.SmartFake implements _i4.Interceptors {
  _FakeInterceptors_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_6<T1> extends _i1.SmartFake implements _i4.Response<T1> {
  _FakeResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWallpaperRepository_7 extends _i1.SmartFake
    implements _i5.WallpaperRepository {
  _FakeWallpaperRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetListWallpaper_8 extends _i1.SmartFake
    implements _i5.GetListWallpaper {
  _FakeGetListWallpaper_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListWallpaperState_9 extends _i1.SmartFake
    implements _i6.ListWallpaperState {
  _FakeListWallpaperState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCategorizedWallpaper_10 extends _i1.SmartFake
    implements _i5.GetCategorizedWallpaper {
  _FakeGetCategorizedWallpaper_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategorizedWallpaperState_11 extends _i1.SmartFake
    implements _i7.CategorizedWallpaperState {
  _FakeCategorizedWallpaperState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDetailWallpaperState_12 extends _i1.SmartFake
    implements _i8.DetailWallpaperState {
  _FakeDetailWallpaperState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchWallpaperState_13 extends _i1.SmartFake
    implements _i9.SearchWallpaperState {
  _FakeSearchWallpaperState_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  @override
  _i10.Future<List<_i2.Wallpaper>> listWallpaper() => (super.noSuchMethod(
        Invocation.method(
          #listWallpaper,
          [],
        ),
        returnValue: _i10.Future<List<_i2.Wallpaper>>.value(<_i2.Wallpaper>[]),
        returnValueForMissingStub:
            _i10.Future<List<_i2.Wallpaper>>.value(<_i2.Wallpaper>[]),
      ) as _i10.Future<List<_i2.Wallpaper>>);
  @override
  _i10.Future<_i2.Wallpaper> detailWallpaper(int? id) => (super.noSuchMethod(
        Invocation.method(
          #detailWallpaper,
          [id],
        ),
        returnValue: _i10.Future<_i2.Wallpaper>.value(_FakeWallpaper_0(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i2.Wallpaper>.value(_FakeWallpaper_0(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
      ) as _i10.Future<_i2.Wallpaper>);
  @override
  _i10.Future<List<_i2.Wallpaper>> searchWallpaper(
    String? query, {
    int? page = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWallpaper,
          [query],
          {#page: page},
        ),
        returnValue: _i10.Future<List<_i2.Wallpaper>>.value(<_i2.Wallpaper>[]),
        returnValueForMissingStub:
            _i10.Future<List<_i2.Wallpaper>>.value(<_i2.Wallpaper>[]),
      ) as _i10.Future<List<_i2.Wallpaper>>);
  @override
  _i10.Future<List<_i2.Wallpaper>> categorizedWallpaper(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #categorizedWallpaper,
          [category],
        ),
        returnValue: _i10.Future<List<_i2.Wallpaper>>.value(<_i2.Wallpaper>[]),
        returnValueForMissingStub:
            _i10.Future<List<_i2.Wallpaper>>.value(<_i2.Wallpaper>[]),
      ) as _i10.Future<List<_i2.Wallpaper>>);
}

/// A class which mocks [WallpaperRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallpaperRepository extends _i1.Mock
    implements _i5.WallpaperRepository {
  @override
  _i10.Future<
      _i3.Either<_i11.Failure, List<_i2.Wallpaper>>> categorizedWallpaper(
          String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #categorizedWallpaper,
          [category],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #categorizedWallpaper,
            [category],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #categorizedWallpaper,
            [category],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>> detailWallpaper(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #detailWallpaper,
          [id],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>>.value(
            _FakeEither_1<_i11.Failure, _i2.Wallpaper>(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>>.value(
                _FakeEither_1<_i11.Failure, _i2.Wallpaper>(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>>);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>> listWallpaper() =>
      (super.noSuchMethod(
        Invocation.method(
          #listWallpaper,
          [],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #listWallpaper,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #listWallpaper,
            [],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>> searchWallpaper(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWallpaper,
          [query],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaper,
            [query],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaper,
            [query],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
  @override
  _i10.Future<
      _i3.Either<_i11.Failure, List<_i2.Wallpaper>>> searchWallpaperLoad(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWallpaperLoad,
          [
            query,
            page,
          ],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaperLoad,
            [
              query,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaperLoad,
            [
              query,
              page,
            ],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i4.Dio {
  @override
  _i4.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_2(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_2(
          this,
          Invocation.getter(#options),
        ),
      ) as _i4.BaseOptions);
  @override
  set options(_i4.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_3(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_3(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i4.HttpClientAdapter);
  @override
  set httpClientAdapter(_i4.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_4(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_4(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_5(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_5(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i4.Interceptors);
  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<_i4.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i4.Options? options,
    _i4.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i4.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i4.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i10.Future<_i4.Response<dynamic>>.value(_FakeResponse_6<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<dynamic>>.value(_FakeResponse_6<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<dynamic>>);
  @override
  _i10.Future<_i4.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i4.ProgressCallback? onReceiveProgress,
    _i4.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i4.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i10.Future<_i4.Response<dynamic>>.value(_FakeResponse_6<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<dynamic>>.value(_FakeResponse_6<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<dynamic>>);
  @override
  _i10.Future<_i4.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i4.CancelToken? cancelToken,
    _i4.Options? options,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i4.CancelToken? cancelToken,
    _i4.Options? options,
    _i4.ProgressCallback? onSendProgress,
    _i4.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
  @override
  _i10.Future<_i4.Response<T>> fetch<T>(_i4.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i4.Response<T>>.value(_FakeResponse_6<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i10.Future<_i4.Response<T>>);
}

/// A class which mocks [GetDetailWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDetailWallpaper extends _i1.Mock
    implements _i5.GetDetailWallpaper {
  @override
  _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>> execute(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>>.value(
            _FakeEither_1<_i11.Failure, _i2.Wallpaper>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>>.value(
                _FakeEither_1<_i11.Failure, _i2.Wallpaper>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, _i2.Wallpaper>>);
}

/// A class which mocks [GetListWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetListWallpaper extends _i1.Mock implements _i5.GetListWallpaper {
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
}

/// A class which mocks [GetSearchWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSearchWallpaper extends _i1.Mock
    implements _i5.GetSearchWallpaper {
  @override
  _i5.WallpaperRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWallpaperRepository_7(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeWallpaperRepository_7(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.WallpaperRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>> call(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [query],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [query],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [query],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>> loadMore(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMore,
          [
            query,
            page,
          ],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #loadMore,
            [
              query,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #loadMore,
            [
              query,
              page,
            ],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
}

/// A class which mocks [GetCategorizedWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategorizedWallpaper extends _i1.Mock
    implements _i5.GetCategorizedWallpaper {
  @override
  _i5.WallpaperRepository get categorizedRepo => (super.noSuchMethod(
        Invocation.getter(#categorizedRepo),
        returnValue: _FakeWallpaperRepository_7(
          this,
          Invocation.getter(#categorizedRepo),
        ),
        returnValueForMissingStub: _FakeWallpaperRepository_7(
          this,
          Invocation.getter(#categorizedRepo),
        ),
      ) as _i5.WallpaperRepository);
  @override
  _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>> call(
          String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [category],
        ),
        returnValue:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [category],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>.value(
                _FakeEither_1<_i11.Failure, List<_i2.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [category],
          ),
        )),
      ) as _i10.Future<_i3.Either<_i11.Failure, List<_i2.Wallpaper>>>);
}

/// A class which mocks [ListWallpaperCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockListWallpaperCubit extends _i1.Mock
    implements _i6.ListWallpaperCubit {
  @override
  _i5.GetListWallpaper get listWallpaperRepo => (super.noSuchMethod(
        Invocation.getter(#listWallpaperRepo),
        returnValue: _FakeGetListWallpaper_8(
          this,
          Invocation.getter(#listWallpaperRepo),
        ),
        returnValueForMissingStub: _FakeGetListWallpaper_8(
          this,
          Invocation.getter(#listWallpaperRepo),
        ),
      ) as _i5.GetListWallpaper);
  @override
  _i6.ListWallpaperState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeListWallpaperState_9(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeListWallpaperState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.ListWallpaperState);
  @override
  _i10.Stream<_i6.ListWallpaperState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i6.ListWallpaperState>.empty(),
        returnValueForMissingStub: _i10.Stream<_i6.ListWallpaperState>.empty(),
      ) as _i10.Stream<_i6.ListWallpaperState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void getWallpaper() => super.noSuchMethod(
        Invocation.method(
          #getWallpaper,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i6.ListWallpaperState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i6.ListWallpaperState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [CategorizedWallpaperCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategorizedWallpaperCubit extends _i1.Mock
    implements _i7.CategorizedWallpaperCubit {
  @override
  _i5.GetCategorizedWallpaper get categorizedRepo => (super.noSuchMethod(
        Invocation.getter(#categorizedRepo),
        returnValue: _FakeGetCategorizedWallpaper_10(
          this,
          Invocation.getter(#categorizedRepo),
        ),
        returnValueForMissingStub: _FakeGetCategorizedWallpaper_10(
          this,
          Invocation.getter(#categorizedRepo),
        ),
      ) as _i5.GetCategorizedWallpaper);
  @override
  _i7.CategorizedWallpaperState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCategorizedWallpaperState_11(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeCategorizedWallpaperState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.CategorizedWallpaperState);
  @override
  _i10.Stream<_i7.CategorizedWallpaperState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i7.CategorizedWallpaperState>.empty(),
        returnValueForMissingStub:
            _i10.Stream<_i7.CategorizedWallpaperState>.empty(),
      ) as _i10.Stream<_i7.CategorizedWallpaperState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void categoryWallpaper(String? category) => super.noSuchMethod(
        Invocation.method(
          #categoryWallpaper,
          [category],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i7.CategorizedWallpaperState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i7.CategorizedWallpaperState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [DetailWallpaperCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailWallpaperCubit extends _i1.Mock
    implements _i8.DetailWallpaperCubit {
  @override
  _i8.DetailWallpaperState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDetailWallpaperState_12(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDetailWallpaperState_12(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.DetailWallpaperState);
  @override
  _i10.Stream<_i8.DetailWallpaperState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i8.DetailWallpaperState>.empty(),
        returnValueForMissingStub:
            _i10.Stream<_i8.DetailWallpaperState>.empty(),
      ) as _i10.Stream<_i8.DetailWallpaperState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void getWallpaperDetail(int? id) => super.noSuchMethod(
        Invocation.method(
          #getWallpaperDetail,
          [id],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i8.DetailWallpaperState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i8.DetailWallpaperState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}

/// A class which mocks [SearchWallpaperCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchWallpaperCubit extends _i1.Mock
    implements _i9.SearchWallpaperCubit {
  @override
  int get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set currentPage(int? _currentPage) => super.noSuchMethod(
        Invocation.setter(
          #currentPage,
          _currentPage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.SearchWallpaperState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSearchWallpaperState_13(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSearchWallpaperState_13(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.SearchWallpaperState);
  @override
  _i10.Stream<_i9.SearchWallpaperState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i9.SearchWallpaperState>.empty(),
        returnValueForMissingStub:
            _i10.Stream<_i9.SearchWallpaperState>.empty(),
      ) as _i10.Stream<_i9.SearchWallpaperState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void searchWallpaper(String? query) => super.noSuchMethod(
        Invocation.method(
          #searchWallpaper,
          [query],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void loadMore(String? query) => super.noSuchMethod(
        Invocation.method(
          #loadMore,
          [query],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clearSearch() => super.noSuchMethod(
        Invocation.method(
          #clearSearch,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i9.SearchWallpaperState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i12.Change<_i9.SearchWallpaperState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
}
