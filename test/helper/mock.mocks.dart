// Mocks generated by Mockito 5.4.4 from annotations
// in get_wallpaper/test/helper/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;

import 'package:async_wallpaper/async_wallpaper.dart' as _i15;
import 'package:bloc/bloc.dart' as _i21;
import 'package:dartz/dartz.dart' as _i8;
import 'package:dio/dio.dart' as _i16;
import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i18;
import 'package:dio/src/dio_mixin.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:flutter/services.dart' as _i19;
import 'package:get_wallpaper/core/core.dart' as _i13;
import 'package:get_wallpaper/data/data.dart' as _i7;
import 'package:get_wallpaper/domain/domain.dart' as _i9;
import 'package:get_wallpaper/presentation/bloc/detail/detail_bloc.dart'
    as _i12;
import 'package:get_wallpaper/presentation/bloc/search/search_wallpaper_bloc.dart'
    as _i10;
import 'package:get_wallpaper/presentation/bloc/set_wallpaper/set_wallpaper_bloc.dart'
    as _i14;
import 'package:get_wallpaper/presentation/bloc/wallpapers/wallpapers_bloc.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i20;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseOptions_0 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_1 extends _i1.SmartFake
    implements _i3.HttpClientAdapter {
  _FakeHttpClientAdapter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_2 extends _i1.SmartFake implements _i4.Transformer {
  _FakeTransformer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_3 extends _i1.SmartFake implements _i5.Interceptors {
  _FakeInterceptors_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4<T1> extends _i1.SmartFake implements _i6.Response<T1> {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWallpaper_5 extends _i1.SmartFake implements _i7.Wallpaper {
  _FakeWallpaper_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$ImageSourceCopyWith_6<$Res> extends _i1.SmartFake
    implements _i7.$ImageSourceCopyWith<$Res> {
  _Fake$ImageSourceCopyWith_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeImageSource_7 extends _i1.SmartFake implements _i7.ImageSource {
  _FakeImageSource_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$WallpaperCopyWith_8<$Res> extends _i1.SmartFake
    implements _i7.$WallpaperCopyWith<$Res> {
  _Fake$WallpaperCopyWith_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_9<L, R> extends _i1.SmartFake implements _i8.Either<L, R> {
  _FakeEither_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWallpaperRepository_10 extends _i1.SmartFake
    implements _i9.WallpaperRepository {
  _FakeWallpaperRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetSearchWallpaper_11 extends _i1.SmartFake
    implements _i9.GetSearchWallpaper {
  _FakeGetSearchWallpaper_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchState_12 extends _i1.SmartFake implements _i10.SearchState {
  _FakeSearchState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetListWallpaper_13 extends _i1.SmartFake
    implements _i9.GetListWallpaper {
  _FakeGetListWallpaper_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCategorizedWallpaper_14 extends _i1.SmartFake
    implements _i9.GetCategorizedWallpaper {
  _FakeGetCategorizedWallpaper_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWallpapersState_15 extends _i1.SmartFake
    implements _i11.WallpapersState {
  _FakeWallpapersState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetDetailWallpaper_16 extends _i1.SmartFake
    implements _i9.GetDetailWallpaper {
  _FakeGetDetailWallpaper_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDetailState_17 extends _i1.SmartFake implements _i12.DetailState {
  _FakeDetailState_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWallpaperHandler_18 extends _i1.SmartFake
    implements _i13.WallpaperHandler {
  _FakeWallpaperHandler_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSetWallpaperState_19 extends _i1.SmartFake
    implements _i14.SetWallpaperState {
  _FakeSetWallpaperState_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AsyncWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockAsyncWallpaper extends _i1.Mock implements _i15.AsyncWallpaper {}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i16.Dio {
  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
        returnValueForMissingStub: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i3.HttpClientAdapter);

  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
        returnValueForMissingStub: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i4.Transformer);

  @override
  set transformer(_i4.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
        returnValueForMissingStub: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i5.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<_i6.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i18.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i18.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i17.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<dynamic>>);

  @override
  _i17.Future<_i6.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i18.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i17.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<dynamic>>);

  @override
  _i17.Future<_i6.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i18.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i18.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);

  @override
  _i17.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i17.Future<_i6.Response<T>>);
}

/// A class which mocks [PlatformException].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformException extends _i1.Mock implements _i19.PlatformException {
  @override
  String get code => (super.noSuchMethod(
        Invocation.getter(#code),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#code),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#code),
        ),
      ) as String);
}

/// A class which mocks [WallpaperHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallpaperHandler extends _i1.Mock implements _i13.WallpaperHandler {
  @override
  _i17.Future<String> getPlatformVersion() => (super.noSuchMethod(
        Invocation.method(
          #getPlatformVersion,
          [],
        ),
        returnValue: _i17.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #getPlatformVersion,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #getPlatformVersion,
            [],
          ),
        )),
      ) as _i17.Future<String>);

  @override
  _i17.Future<String> setAsWallpaper(
    String? url,
    int? location,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAsWallpaper,
          [
            url,
            location,
          ],
        ),
        returnValue: _i17.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #setAsWallpaper,
            [
              url,
              location,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<String>.value(_i20.dummyValue<String>(
          this,
          Invocation.method(
            #setAsWallpaper,
            [
              url,
              location,
            ],
          ),
        )),
      ) as _i17.Future<String>);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i7.ApiService {
  @override
  _i17.Future<List<_i7.Wallpaper>> listWallpaper(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #listWallpaper,
          [page],
        ),
        returnValue: _i17.Future<List<_i7.Wallpaper>>.value(<_i7.Wallpaper>[]),
        returnValueForMissingStub:
            _i17.Future<List<_i7.Wallpaper>>.value(<_i7.Wallpaper>[]),
      ) as _i17.Future<List<_i7.Wallpaper>>);

  @override
  _i17.Future<_i7.Wallpaper> detailWallpaper(int? id) => (super.noSuchMethod(
        Invocation.method(
          #detailWallpaper,
          [id],
        ),
        returnValue: _i17.Future<_i7.Wallpaper>.value(_FakeWallpaper_5(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i7.Wallpaper>.value(_FakeWallpaper_5(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
      ) as _i17.Future<_i7.Wallpaper>);

  @override
  _i17.Future<List<_i7.Wallpaper>> searchWallpaper(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWallpaper,
          [
            query,
            page,
          ],
        ),
        returnValue: _i17.Future<List<_i7.Wallpaper>>.value(<_i7.Wallpaper>[]),
        returnValueForMissingStub:
            _i17.Future<List<_i7.Wallpaper>>.value(<_i7.Wallpaper>[]),
      ) as _i17.Future<List<_i7.Wallpaper>>);

  @override
  _i17.Future<List<_i7.Wallpaper>> categorizedWallpaper(
    String? category,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #categorizedWallpaper,
          [
            category,
            page,
          ],
        ),
        returnValue: _i17.Future<List<_i7.Wallpaper>>.value(<_i7.Wallpaper>[]),
        returnValueForMissingStub:
            _i17.Future<List<_i7.Wallpaper>>.value(<_i7.Wallpaper>[]),
      ) as _i17.Future<List<_i7.Wallpaper>>);
}

/// A class which mocks [ImageSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageSource extends _i1.Mock implements _i7.ImageSource {
  @override
  String get original => (super.noSuchMethod(
        Invocation.getter(#original),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#original),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#original),
        ),
      ) as String);

  @override
  String get large2x => (super.noSuchMethod(
        Invocation.getter(#large2x),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#large2x),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#large2x),
        ),
      ) as String);

  @override
  String get large => (super.noSuchMethod(
        Invocation.getter(#large),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#large),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#large),
        ),
      ) as String);

  @override
  String get medium => (super.noSuchMethod(
        Invocation.getter(#medium),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#medium),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#medium),
        ),
      ) as String);

  @override
  String get small => (super.noSuchMethod(
        Invocation.getter(#small),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#small),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#small),
        ),
      ) as String);

  @override
  String get portrait => (super.noSuchMethod(
        Invocation.getter(#portrait),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#portrait),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#portrait),
        ),
      ) as String);

  @override
  String get landscape => (super.noSuchMethod(
        Invocation.getter(#landscape),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#landscape),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#landscape),
        ),
      ) as String);

  @override
  String get tiny => (super.noSuchMethod(
        Invocation.getter(#tiny),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#tiny),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#tiny),
        ),
      ) as String);

  @override
  _i7.$ImageSourceCopyWith<_i7.ImageSource> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$ImageSourceCopyWith_6<_i7.ImageSource>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub: _Fake$ImageSourceCopyWith_6<_i7.ImageSource>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i7.$ImageSourceCopyWith<_i7.ImageSource>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Wallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallpaper extends _i1.Mock implements _i7.Wallpaper {
  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#url),
        ),
      ) as String);

  @override
  String get photographer => (super.noSuchMethod(
        Invocation.getter(#photographer),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#photographer),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#photographer),
        ),
      ) as String);

  @override
  String get photographerUrl => (super.noSuchMethod(
        Invocation.getter(#photographerUrl),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#photographerUrl),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#photographerUrl),
        ),
      ) as String);

  @override
  int get photographerId => (super.noSuchMethod(
        Invocation.getter(#photographerId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get avgColor => (super.noSuchMethod(
        Invocation.getter(#avgColor),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#avgColor),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#avgColor),
        ),
      ) as String);

  @override
  _i7.ImageSource get src => (super.noSuchMethod(
        Invocation.getter(#src),
        returnValue: _FakeImageSource_7(
          this,
          Invocation.getter(#src),
        ),
        returnValueForMissingStub: _FakeImageSource_7(
          this,
          Invocation.getter(#src),
        ),
      ) as _i7.ImageSource);

  @override
  bool get liked => (super.noSuchMethod(
        Invocation.getter(#liked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get alt => (super.noSuchMethod(
        Invocation.getter(#alt),
        returnValue: _i20.dummyValue<String>(
          this,
          Invocation.getter(#alt),
        ),
        returnValueForMissingStub: _i20.dummyValue<String>(
          this,
          Invocation.getter(#alt),
        ),
      ) as String);

  @override
  _i7.$WallpaperCopyWith<_i7.Wallpaper> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$WallpaperCopyWith_8<_i7.Wallpaper>(
          this,
          Invocation.getter(#copyWith),
        ),
        returnValueForMissingStub: _Fake$WallpaperCopyWith_8<_i7.Wallpaper>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i7.$WallpaperCopyWith<_i7.Wallpaper>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [WallpaperRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallpaperRepository extends _i1.Mock
    implements _i9.WallpaperRepository {
  @override
  _i17.Future<
      _i8.Either<_i13.Failure, List<_i7.Wallpaper>>> categorizedWallpaper(
    String? category,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #categorizedWallpaper,
          [
            category,
            page,
          ],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #categorizedWallpaper,
            [
              category,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #categorizedWallpaper,
            [
              category,
              page,
            ],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);

  @override
  _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>> detailWallpaper(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #detailWallpaper,
          [id],
        ),
        returnValue: _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>>.value(
            _FakeEither_9<_i13.Failure, _i7.Wallpaper>(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>>.value(
                _FakeEither_9<_i13.Failure, _i7.Wallpaper>(
          this,
          Invocation.method(
            #detailWallpaper,
            [id],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>>);

  @override
  _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>> listWallpaper(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #listWallpaper,
          [page],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #listWallpaper,
            [page],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #listWallpaper,
            [page],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);

  @override
  _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>> searchWallpaper(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWallpaper,
          [
            query,
            page,
          ],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaper,
            [
              query,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaper,
            [
              query,
              page,
            ],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);

  @override
  _i17.Future<
      _i8.Either<_i13.Failure, List<_i7.Wallpaper>>> searchWallpaperLoad(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchWallpaperLoad,
          [
            query,
            page,
          ],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaperLoad,
            [
              query,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #searchWallpaperLoad,
            [
              query,
              page,
            ],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);
}

/// A class which mocks [GetDetailWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDetailWallpaper extends _i1.Mock
    implements _i9.GetDetailWallpaper {
  @override
  _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>> execute(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>>.value(
            _FakeEither_9<_i13.Failure, _i7.Wallpaper>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>>.value(
                _FakeEither_9<_i13.Failure, _i7.Wallpaper>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, _i7.Wallpaper>>);
}

/// A class which mocks [GetListWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetListWallpaper extends _i1.Mock implements _i9.GetListWallpaper {
  @override
  _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>> call(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [page],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [page],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [page],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);
}

/// A class which mocks [GetSearchWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSearchWallpaper extends _i1.Mock
    implements _i9.GetSearchWallpaper {
  @override
  _i9.WallpaperRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeWallpaperRepository_10(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeWallpaperRepository_10(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i9.WallpaperRepository);

  @override
  _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>> call(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            query,
            page,
          ],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [
              query,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [
              query,
              page,
            ],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);

  @override
  _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>> loadMore(
    String? query,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMore,
          [
            query,
            page,
          ],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #loadMore,
            [
              query,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #loadMore,
            [
              query,
              page,
            ],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);
}

/// A class which mocks [GetCategorizedWallpaper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategorizedWallpaper extends _i1.Mock
    implements _i9.GetCategorizedWallpaper {
  @override
  _i9.WallpaperRepository get categorizedRepo => (super.noSuchMethod(
        Invocation.getter(#categorizedRepo),
        returnValue: _FakeWallpaperRepository_10(
          this,
          Invocation.getter(#categorizedRepo),
        ),
        returnValueForMissingStub: _FakeWallpaperRepository_10(
          this,
          Invocation.getter(#categorizedRepo),
        ),
      ) as _i9.WallpaperRepository);

  @override
  _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>> call(
    String? category,
    int? page,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            category,
            page,
          ],
        ),
        returnValue:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [
              category,
              page,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>.value(
                _FakeEither_9<_i13.Failure, List<_i7.Wallpaper>>(
          this,
          Invocation.method(
            #call,
            [
              category,
              page,
            ],
          ),
        )),
      ) as _i17.Future<_i8.Either<_i13.Failure, List<_i7.Wallpaper>>>);
}

/// A class which mocks [SearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBloc extends _i1.Mock implements _i10.SearchBloc {
  @override
  _i9.GetSearchWallpaper get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeGetSearchWallpaper_11(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeGetSearchWallpaper_11(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i9.GetSearchWallpaper);

  @override
  _i10.SearchState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSearchState_12(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSearchState_12(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.SearchState);

  @override
  _i17.Stream<_i10.SearchState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i10.SearchState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i10.SearchState>.empty(),
      ) as _i17.Stream<_i10.SearchState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i10.SearchEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i10.SearchEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i10.SearchState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i10.SearchEvent>(
    _i21.EventHandler<E, _i10.SearchState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i21.Transition<_i10.SearchEvent, _i10.SearchState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  void onChange(_i21.Change<_i10.SearchState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WallpapersBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallpapersBloc extends _i1.Mock implements _i11.WallpapersBloc {
  @override
  _i9.GetListWallpaper get getListRepo => (super.noSuchMethod(
        Invocation.getter(#getListRepo),
        returnValue: _FakeGetListWallpaper_13(
          this,
          Invocation.getter(#getListRepo),
        ),
        returnValueForMissingStub: _FakeGetListWallpaper_13(
          this,
          Invocation.getter(#getListRepo),
        ),
      ) as _i9.GetListWallpaper);

  @override
  _i9.GetCategorizedWallpaper get categorizedRepo => (super.noSuchMethod(
        Invocation.getter(#categorizedRepo),
        returnValue: _FakeGetCategorizedWallpaper_14(
          this,
          Invocation.getter(#categorizedRepo),
        ),
        returnValueForMissingStub: _FakeGetCategorizedWallpaper_14(
          this,
          Invocation.getter(#categorizedRepo),
        ),
      ) as _i9.GetCategorizedWallpaper);

  @override
  _i11.WallpapersState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWallpapersState_15(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeWallpapersState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.WallpapersState);

  @override
  _i17.Stream<_i11.WallpapersState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i11.WallpapersState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i11.WallpapersState>.empty(),
      ) as _i17.Stream<_i11.WallpapersState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i11.WallpapersEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.WallpapersEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.WallpapersState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.WallpapersEvent>(
    _i21.EventHandler<E, _i11.WallpapersState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i21.Transition<_i11.WallpapersEvent, _i11.WallpapersState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  void onChange(_i21.Change<_i11.WallpapersState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailBloc extends _i1.Mock implements _i12.DetailBloc {
  @override
  _i9.GetDetailWallpaper get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeGetDetailWallpaper_16(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeGetDetailWallpaper_16(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i9.GetDetailWallpaper);

  @override
  _i12.DetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDetailState_17(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeDetailState_17(
          this,
          Invocation.getter(#state),
        ),
      ) as _i12.DetailState);

  @override
  _i17.Stream<_i12.DetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i12.DetailState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i12.DetailState>.empty(),
      ) as _i17.Stream<_i12.DetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i12.DetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i12.DetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i12.DetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i12.DetailEvent>(
    _i21.EventHandler<E, _i12.DetailState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i21.Transition<_i12.DetailEvent, _i12.DetailState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  void onChange(_i21.Change<_i12.DetailState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SetWallpaperBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetWallpaperBloc extends _i1.Mock implements _i14.SetWallpaperBloc {
  @override
  _i13.WallpaperHandler get wallpaperHandler => (super.noSuchMethod(
        Invocation.getter(#wallpaperHandler),
        returnValue: _FakeWallpaperHandler_18(
          this,
          Invocation.getter(#wallpaperHandler),
        ),
        returnValueForMissingStub: _FakeWallpaperHandler_18(
          this,
          Invocation.getter(#wallpaperHandler),
        ),
      ) as _i13.WallpaperHandler);

  @override
  _i14.SetWallpaperState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSetWallpaperState_19(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSetWallpaperState_19(
          this,
          Invocation.getter(#state),
        ),
      ) as _i14.SetWallpaperState);

  @override
  _i17.Stream<_i14.SetWallpaperState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i17.Stream<_i14.SetWallpaperState>.empty(),
        returnValueForMissingStub: _i17.Stream<_i14.SetWallpaperState>.empty(),
      ) as _i17.Stream<_i14.SetWallpaperState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i14.SetWallpaperEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i14.SetWallpaperEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i14.SetWallpaperState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i14.SetWallpaperEvent>(
    _i21.EventHandler<E, _i14.SetWallpaperState>? handler, {
    _i21.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i21.Transition<_i14.SetWallpaperEvent, _i14.SetWallpaperState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  void onChange(_i21.Change<_i14.SetWallpaperState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
